@page "/listado-personas"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject Sesion Sesion
@inject PersonaListarUseCase personaListarUseCase
@inject PersonaBajaUseCase personaBajaUseCase


@inject PersonaModificacionUseCase personaModificacionUseCase

@using CentroEventos.Aplicacion.Entidades

<PageTitle>Listado de Persona</PageTitle>

<div class="container mt-4">
        @if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">
        @mensajeError
    </div>
}

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Dni</th>
                <th>Teléfono</th>
                @if (Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaModificacion) == true ||
                     Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaBaja) == true)
                {
                    <th>Acción</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (_lista != null && _lista.Any())
            {
                @foreach (var per in _lista)
                {
                    <tr>
                        <td>@per.Id</td>
                        <td>@per.Nombre</td>
                        <td>@per.Apellido</td>
                        <td>@per.Email</td>
                        <td>@per.Dni</td>
                        <td>@per.Telefono</td>
                        @if (Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaModificacion) == true ||
                             Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaBaja) == true)
                        {
                            <td>
                                @if (Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaModificacion) == true)
                                {
                                    <a class="btn btn-sm btn-primary" @onclick="() => AbrirModalEditar(per)">Editar</a>
                                }

                                @if (Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaBaja) == true)
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmarEliminar(per.Id)">Eliminar</button>
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7" class="text-center">No hay personas registradas.</td>
                </tr>
            }
        </tbody>
    </table>
    @if (personaSeleccionada != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Persona</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label>Nombre</label>
                        <input class="form-control" @bind="personaSeleccionada.Nombre" />
                    </div>
                    <div class="mb-2">
                        <label>Apellido</label>
                        <input class="form-control" @bind="personaSeleccionada.Apellido" />
                    </div>
                    <div class="mb-2">
                        <label>Email</label>
                        <input class="form-control" @bind="personaSeleccionada.Email" />
                    </div>
                    <div class="mb-2">
                        <label>DNI</label>
                        <input class="form-control" @bind="personaSeleccionada.Dni" />
                    </div>
                    <div class="mb-2">
                        <label>Teléfono</label>
                        <input class="form-control" @bind="personaSeleccionada.Telefono" />
                    </div>
                    @if (!string.IsNullOrEmpty(mensajeErrorModal))
                    {
                        <div class="alert alert-danger">@mensajeErrorModal</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarCambios">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

    @if (Sesion.UsuarioActual?.Permisos.Contains(Permiso.PersonaAlta) == true)
    {
        <a class="btn btn-sm btn-primary" href="/crear-personas">Agregar Persona</a>
    }
</div>

@code {
    List<Persona> _lista = new();
    Persona? personaSeleccionada;
    string? mensajeError;
    string? mensajeErrorModal;

    protected override void OnInitialized()
    {
        _lista = personaListarUseCase.Ejecutar();
    }

    private void AbrirModalEditar(Persona persona)
    {
        // Clonamos para no editar directamente hasta confirmar
        personaSeleccionada = new Persona
        {
            Id = persona.Id,
            Nombre = persona.Nombre,
            Apellido = persona.Apellido,
            Email = persona.Email,
            Dni = persona.Dni,
            Telefono = persona.Telefono
        };
        mensajeErrorModal = null;
    }

    private void CerrarModal()
    {
        personaSeleccionada = null;
        mensajeErrorModal = null;
    }

    private void GuardarCambios()
    {
        mensajeErrorModal = null;

        try
        {
            var idUsuario = Sesion.UsuarioActual?.Id ?? 0;
            personaModificacionUseCase.Ejecutar(personaSeleccionada!,idUsuario);

            // Refrescamos lista (podés optimizar reemplazando solo 1)
            _lista = personaListarUseCase.Ejecutar();

            personaSeleccionada = null; // cerrar modal
        }
        catch (Exception ex)
        {
            mensajeErrorModal = "Ocurrió un error al guardar los cambios.";
        }
    }

    private async Task ConfirmarEliminar(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "¿Estás seguro que querés eliminar esta persona?"))
        {
            EliminarPersona(id);
        }
    }

    private void EliminarPersona(int id)
    {
        mensajeError = null;

        try
        {
            var idUsuario = Sesion.UsuarioActual?.Id ?? 0;
            personaBajaUseCase.Ejecutar(id, idUsuario);
            _lista = _lista.Where(p => p.Id != id).ToList();
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = $"Error de autorización: {ex.Message}";
        }
        catch (OperacionInvalidaException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception)
        {
            mensajeError = "Error inesperado al eliminar persona.";
        }
    }

    [Inject] IJSRuntime JS { get; set; } = default!;
}
